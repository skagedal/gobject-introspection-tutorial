<page xmlns="http://projectmallard.org/1.0/"
      type="topic"
      id="stepfour">
<info>
  <credit type="author copyright">
    <name>Simon KÃ¥gedal Reimer</name>
    <email>skagedal@gmail.com</email>
    <years>2013</years>
  </credit>
  <include href="cc-by-sa-3-0.xml" xmlns="http://www.w3.org/2001/XInclude"/>
  <link type="guide" xref="index" />
  <title type="sort">Step 04</title>
</info>
<title>Make it a library</title>

<note style="tip sidebar">
<screen>
<output style="prompt">$ </output><input>git checkout stepfour</input>
<output style="prompt">$ </output><input>git diff stepthree</input>
<output style="prompt">$ </output><input>make</input>
</screen>
</note>

<p>In this part of the tutorial, we'll move the <code>TutGreeter</code>
class to its own shared library, <sys>libtut</sys> for easy reuse from
all our applications with greeting needs.</p>

<p>The <cmd>libtool</cmd> utility is a good way of creating shared and
dynamic libraries in a portable way.  Usually, this shell script is
included with the distribution of any package using it, but you can
also use a system installed version. On Debian-based systems, use
<cmd>sudo apt-get install libtool</cmd> to install it. Then you can
compile and link the library with:</p>

<screen>
<output style="prompt">$ </output><input>libtool compile gcc `pkg-config --cflags gobject-2.0` \
    -g -c tut-greeter.c -o tut-greeter.lo</input>
<output style="prompt">$ </output><input>libtool link gcc `pkg-config --libs gobject-2.0` \
    -rpath /usr/local/lib \
    tut-greeter.lo -o libtutorial.la </input>
</screen>

<p><cmd>libtool</cmd> is a bit picky about some things, like the order
of the arguments to <cmd>gcc</cmd>, but the above works for me.</p>

<p>The call <cmd>g-ir-scanner</cmd> is similar to the previous
case, exchanging <cmd>--program</cmd> for <cmd>--library</cmd>.  Run 
<cmd>g-ir-compiler</cmd> in just the same way.</p>

<screen>
<output type="prompt">$ </output><input>g-ir-scanner tut-greeter.[ch] \
    --library=tutorial \
    `pkg-config --cflags gobject-2.0` --include=GObject-2.0 \
    --namespace=Tut --nsversion=0.1 --output=Tut-0.1.gir</input>
<output type="prompt">$ </output><input>g-ir-compiler Tut-0.1.gir --output=Tut-0.1.typelib</input>
</screen>

<p>Note that when <cmd>g-ir-scanner</cmd> scans a library, it compiles
a stub program to call the <code>gi_repository_dump</code> function.
It then needs to find the <file>libtutorial.so</file> shared library
file, which libtool places in the <file>.libs</file> directory.  Since
<cmd>g-ir-scanner</cmd> uses libtool itself, this happens to just
work.  However, for the following steps to work we need to set some
environment variables so that gjs and Python can find the library and
the typelib file (as we did before):</p>

<screen>
<output type="prompt">$ </output><input>export LD_LIBRARY_PATH=`pwd`/.libs:$LD_LIBRARY_PATH</input>
<output type="prompt">$ </output><input>export GI_TYPELIB_PATH=`pwd`</input>
</screen>

<p>Now, we're ready and can easily access the class from a JavaScript.
We can do the following to do the same job as our <file>main.c</file> did:
</p>

<screen>
<output style="prompt">$ </output><input>gjs main.js</input>
<output>Hello, JavaScript programmer!</output>
</screen>

<p>With <link href="https://live.gnome.org/PyGObject">PyGObject</link> installed, we can use the class from a Python interpreter:</p>

<screen>
<output style="prompt">$ </output><input>python</input>
<output>Python 2.7.4 (default, Apr 19 2013, 18:32:33) 
[GCC 4.7.3] on linux2
Type "help", "copyright", "credits" or "license" for more information.</output>
<output style="prompt">&gt;&gt;&gt; </output><input>from gi.repository import Tut</input>
<output style="prompt">&gt;&gt;&gt; </output><input>greeter = Tut.Greeter(greetee = "Python programmer")</input>
<output style="prompt">&gt;&gt;&gt; </output><input>greeter.greet()</input>
<output>Hello, Python programmer!</output>
</screen>

<p>Here's a Lua one-liner, using the <link href="https://github.com/pavouk/lgi">lgi</link> bindings:</p>

<code>
<output style="prompt">$ </output><input>lua -e 'require("lgi").require("Tut").Greeter { greetee = "Lua programmer" }:greet()'</input>
<output>Hello, Lua programmer!</output>
</code>

<p>Finally, a little Ruby program using the <link href="https://github.com/mvz/ruby-gir-ffi/wiki">ruby-gir-ffi</link> bindings:</p>

<code>
require 'gir_ffi'
GirFFI.setup :Tut
obj = Tut::Greeter.new
obj.set_property 'greetee', 'Ruby programmer'
obj.greet
</code>

<p>There are many other languages you can use, like C#, Vala, Java,
Guile and more; see <link
href="https://live.gnome.org/GObjectIntrospection/Users">this
page</link> for bindings.</p>

<p>This tutorial has barely scratched the surface of what you can do
with GObject Introspection, but I hope it has wet your appetite!</p>

<links type="prevnext" />
</page>
