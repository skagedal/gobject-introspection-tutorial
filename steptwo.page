<page xmlns="http://projectmallard.org/1.0/"
      type="topic"
      id="steptwo">
<info>
  <credit type="author copyright">
    <name>Simon Kågedal Reimer</name>
    <email>skagedal@gmail.com</email>
    <years>2013</years>
  </credit>
  <include href="cc-by-sa-3-0.xml" xmlns="http://www.w3.org/2001/XInclude"/>
  <link type="guide" xref="index" />
  <link type="next" xref="stepthree" />
  <title type="sort">Step 02</title>
</info>
<title>Introspecting the greeter</title>

<note style="tip sidebar">
<screen>
<output style="prompt">$ </output><input>git checkout steptwo</input>
<output style="prompt">$ </output><input>git diff stepone</input>
<output style="prompt">$ </output><input>make</input>
</screen>
</note>

<p>Now that we have a GObject class, let's introspect it. This is done
by the program <cmd>g-ir-scanner</cmd>. This program looks in our C
source code and headers for annotations, and also runs the compiled
program to get information about installed signals and properties.  To
make this work, we have to add some code to the program to make it
recognize a special command line option.</p>

<p>Add an include to the top of <file>main.c</file>:</p>

<code mime="text/x-csrc"><![CDATA[
#include <girepository.h>
]]></code>

<p>And some code to the <code>main</code> function:</p>

<code mime="text/x-csrc"><![CDATA[
    GOptionContext *ctx;
    GError *error = NULL;

    ctx = g_option_context_new (NULL);
    g_option_context_add_group (ctx, g_irepository_get_option_group ());  

    if (!g_option_context_parse (ctx, &argc, &argv, &error)) {
        g_print ("greeter: %s\n", error->message);
        return 1;
    }
]]></code>

<p>We also need some changes to the <file>Makefile</file> since we're
now also using the <sys>gobject-introspection-1.0</sys> package. We
also need to link against the <sys>gmodule-2.0</sys> library since the
GObject Introspection code uses that. (I don't know
why <cmd>pkg-config --libs gobject-introspection-1.0</cmd> doesn't
include that as a dependency, as it does with <sys>glib-2.0</sys>
and <sys>gobject-2.0</sys>.) </p>

<p>To compile this, you need to have the <app>GObject
Introspection</app> package installed, including development files.
On Debian-based systems such as Ubuntu, <cmd>sudo apt-get install
libgirepository1.0-dev</cmd> should bring in everything you need.</p>

<comment>TODO: Add the equivalent for other common distros such as
Fedora-based</comment>

<p>Recompile with <cmd>make</cmd>.  The program now has a command line
option scanner; type <cmd>./greeter --help</cmd> to verify that it
works.  You'll see no mention of any option to do introspection, not
even with <cmd>--help-all</cmd>.  This is hidden, since it's not
really useful for end users of your program, but it's there:</p>

<screen>
<output type="prompt">$ </output><input>./greeter --introspect-dump </input>
<output>greeter: Missing argument for --introspect-dump</output>
</screen>

<note style="advanced">
<p>You don't really need to know this to use introspection, but if
you're curious about what argument the <cmd>--introspect-dump</cmd>
option is expecting, see the documentation
for <link href="https://developer.gnome.org/gi/unstable/gi-girepository.html#g-irepository-dump"><code>g_irepository_dump</code></link>,
to which the argument is sent.</p>
</note>

<note style="tip sidebar">
<screen>
<output style="prompt">$ </output><input>git checkout steptwo_gir</input>
<output style="prompt">$ </output><input>git diff steptwo</input>
<output style="prompt">$ </output><input>make</input>
</screen>
</note>

<p>Now, we're ready to run <cmd>g-ir-scanner</cmd>. Again, in a real
situation we'd use a build tool such as <app>automake</app> to put
this together for us, but it can be instructional to try it directly
on the command line.</p>

<screen>
<output type="prompt">$ </output><input>g-ir-scanner tut-greeter.[ch] \
    --program=./greeter \
    `pkg-config --cflags gobject-introspection-1.0` --include=GObject-2.0 \
    --namespace=Tut --nsversion=0.1 --output=Tut-0.1.gir</input>
</screen>

<p>First, we tell the scanner what source files to look in. Then, we
tell it that it is a program we're introspecting and not a library,
and where to find this program. Next, since the scanner needs to
expand the headers in order to correctly parse the code, we need to
give it the same <cmd>pkg-config --cflags</cmd> output as is used when
compiling, so that it can find these headers.  We tell the scanner
that GObject-2.0 is an introspection dependency to our namespace.
Last, we call our namespace <code>Tut</code> with namespace
version <code>0.1</code> and ask for output to the
file <file>Tut-0.1.gir</file>.  For a complete reference
to <cmd>g-ir-scanner</cmd>, see the <link 
href="http://manpages.ubuntu.com/manpages/raring/man1/g-ir-scanner.1.html">man
page</link>.</p>

<p>Take a good look at the output file.  It's an XML file that
describes all the classes in our namespace, in our case
the <code>TutGreeter</code>, and how they're connected to C code.
It's also instructional to take a look at the <file>.gir</file> files
of APIs you might be familiar with, such as <app>Gtk+</app>&#160;– you
probably have them installed on your system; try <cmd>locate
.gir</cmd>.</p>

<p>Code that uses your introspected classes don't read the XML
directly though, that would be inefficient. Instead, we convert it to
a binary format called <app>typelib</app>. This is done
with <cmd>g-ir-compiler</cmd>:</p>

<screen>
<output type="prompt">$ </output><input>g-ir-compiler Tut-0.1.gir --output=Tut-0.1.typelib</output>
</screen>

<p>See the <link href="http://manpages.ubuntu.com/manpages/raring/man1/g-ir-compiler.1.html"><cmd>g-ir-compiler</cmd> man page</link> for full reference.</p>

<section id="exercises">
<title>Exercises</title>
<list>
  <item><p>Using the programming language and an XML parsing library
  of your choice, such as Python with lxml, write a simple script to
  extract the names of all classes and their methods from
  a <file>.gir</file> file.</p></item>
</list>

<links type="prevnext" />
</page>
