<page xmlns="http://projectmallard.org/1.0/"
      type="topic"
      id="stepone">
<info>
  <link type="guide" xref="index" />
  <link type="next" xref="steptwo" />
</info>
<title>Step one: A simple GObject class</title>

<p>First, we'll create a very simple <code>GObject</code> called <code>TutGreeter</code>.  Besides the boilerplate GObject stuff, it has one method: <code>tut_greeter_greet</code> that displays a well known friendly greeting on standard output, and one property, <code>greetee</code> that holds the name of the entity to greet.</p>

<p>You can follow along as we move forward in the tutorial by checking out a git project:</p>

<screen>
<output style="prompt">$ </output><input>git clone https://git.gitorious.org/gobject-introspection-tutorial/code.git tutorial</input>
<output style="prompt">$ </output><input>cd tutorial</input>
<output style="prompt">$ </output><input>git checkout stepone</input>
</screen>

<p><code>TutGreeter</code> is defined in <link href="https://www.gitorious.org/gobject-introspection-tutorial/code/blobs/stepone/tut-greeter.h"><file>tut-greeter.h</file></link> and <link href="https://www.gitorious.org/gobject-introspection-tutorial/code/blobs/stepone/tut-greeter.c"><code>tut-greeter.c</code></link>.  Most of this is standard GObject stuff, seen in all GObject C projects.  This is how we initialize the class:</p>

<code mime="text/x-csrc">
static void
tut_greeter_class_init (TutGreeterClass *klass)
{
    GObjectClass *object_class = G_OBJECT_CLASS (klass);

    object_class->set_property = tut_greeter_set_property;
    object_class->get_property = tut_greeter_get_property;
    object_class->finalize = tut_greeter_finalize;

    obj_properties[PROP_GREETEE] = 
	g_param_spec_string ("greetee",
			     "Greetee",
			     "The entity to greet.",
			     "World",
			     G_PARAM_READWRITE |
			     G_PARAM_CONSTRUCT);

    g_object_class_install_properties (object_class,
				       N_PROPERTIES,
				       obj_properties);

    g_type_class_add_private (object_class, sizeof (TutGreeterPrivate));
}
</code>

<p>This installs a property <code>greetee</code> with the default value of <code>"World"</code>, that is set on construction. The <code>greet</code> method then looks like this:</p>

<code mime="text/x-csrc">
/**
 * tut_greeter_greet:
 * @greeter: a #TutGreeter
 *
 * Prints a friendly greeting.
 *
 * Return value: nothing.
 */

void
tut_greeter_greet (TutGreeter *greeter)
{
    TutGreeterPrivate *priv;
    g_return_if_fail (greeter != NULL);

    priv = TUT_GREETER_GET_PRIVATE (greeter);
    printf ("Hello, %s!\n", priv->greetee);

}
</code>

<p>As you see, all code intended to be used from the outside is documented with a <app>GtkDoc</app> header.  This is of course good practice in any case, but for what we're about to do – introspection – it's a necessity.  GObject Introspection uses these GtkDoc sections with some special annotations to figure out how the function is to be used and to map things like output parameters to an appropriate construct in the bound language.</p>

<p>We also have a simple <code>main</code> function in <link href="https://www.gitorious.org/gobject-introspection-tutorial/code/blobs/stepone/main.c"><file>main.c</file></link>:</p>

<code mime="text/x-csrc">
int main (int argc, char *argv[]) 
{
    TutGreeter *greeter;

    greeter = tut_greeter_new ();
    tut_greeter_greet (greeter);

    return 0;
}
</code>

<p>Last, we have a <link href="https://www.gitorious.org/gobject-introspection-tutorial/code/blobs/stepone/Makefile"><file>Makefile</file></link>.  In a real-world project, you'll want to use a more sophisticated build system; the GNU build tool chain with <app>autoconf</app>, <app>automake</app> and friends is the most commonly used and best supported system.  For the purpose of this tutorial, I find that a simple GNU Makefile makes it easy to follow what's happening.  Just type <cmd>make</cmd> at the console and you should get a binary called <file>greeter</file>.  Run it, and feel greeted.</p>

<links type="prevnext" />
</page>
