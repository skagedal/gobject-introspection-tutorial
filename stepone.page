<page xmlns="http://projectmallard.org/1.0/"
      type="topic"
      id="stepone">
<info>
  <credit type="author copyright">
    <name>Simon KÃ¥gedal Reimer</name>
    <email>skagedal@gmail.com</email>
    <years>2013</years>
  </credit>
  <include href="cc-by-sa-3-0.xml" xmlns="http://www.w3.org/2001/XInclude"/>
  <link type="guide" xref="index" />
  <link type="next" xref="steptwo" />
  <title type="sort">Step 01</title>
</info>
<title>Creating a simple GObject class</title>

<p>First, we'll create a very simple <code>GObject</code>
called <code>TutGreeter</code>.  It has one
method, <code>tut_greeter_greet</code>, that writes a friendly
greeting on standard output, and one property, <code>greetee</code>
that holds the name of the entity to greet.</p>

<p>If you're a git user, you can follow the steps in the tutorial by
cloning a repository:</p>

<screen>
<output style="prompt">$ </output><input>git clone https://git.gitorious.org/gobject-introspection-tutorial/code.git tutorial-code</input>
<output style="prompt">$ </output><input>cd tutorial-code</input>
<output style="prompt">$ </output><input>git checkout stepone</input>
</screen>

<p>If you prefer not to use git, you can just copy the files from the
links below.</p>

<p><code>TutGreeter</code> is defined
in <link href="https://www.gitorious.org/gobject-introspection-tutorial/code/blobs/stepone/tut-greeter.h"><file>tut-greeter.h</file></link>
and <link href="https://www.gitorious.org/gobject-introspection-tutorial/code/blobs/stepone/tut-greeter.c"><file>tut-greeter.c</file></link>.
Most of this is boilerplate GObject code, seen in all GObject C
projects, so in this text we'll focus on the interesting bits.  This
is how the class is initialized:</p>

<code mime="text/x-csrc"><![CDATA[
static void
tut_greeter_class_init (TutGreeterClass *klass)
{
    GObjectClass *object_class = G_OBJECT_CLASS (klass);

    object_class->set_property = tut_greeter_set_property;
    object_class->get_property = tut_greeter_get_property;
    object_class->finalize = tut_greeter_finalize;

    obj_properties[PROP_GREETEE] = 
        g_param_spec_string ("greetee",
                             "Greetee",
                             "The entity to greet.",
                             "World",
                             G_PARAM_READWRITE |
                             G_PARAM_CONSTRUCT);

    g_object_class_install_properties (object_class,
                                       N_PROPERTIES,
                                       obj_properties);

    g_type_class_add_private (object_class, sizeof (TutGreeterPrivate));
}
]]></code>

<p>This installs a property <code>greetee</code> with the default
value of <code>"World"</code>. The <code>greet</code> method looks
like this:</p>

<code mime="text/x-csrc"><![CDATA[
/**
 * tut_greeter_greet:
 * @greeter: a #TutGreeter
 *
 * Prints a friendly greeting.
 *
 * Return value: nothing.
 */

void
tut_greeter_greet (TutGreeter *greeter)
{
    TutGreeterPrivate *priv;
    g_return_if_fail (greeter != NULL);

    priv = TUT_GREETER_GET_PRIVATE (greeter);
    printf ("Hello, %s!\n", priv->greetee);

}
]]></code>

<p>As you see, all code intended to be used from the outside is
documented with <app>GtkDoc</app> headers.  This is always good
practice, but for introspection to work, it's a necessity.  GObject
Introspection uses these GtkDoc sections with some special annotations
to figure out how the function is to be used, so that language
bindings can map things like output parameters to appropriate
constructs.</p>

<p>We also have a simple <code>main</code> function
in <link href="https://www.gitorious.org/gobject-introspection-tutorial/code/blobs/stepone/main.c"><file>main.c</file></link>:</p>

<code mime="text/x-csrc"><![CDATA[
int main (int argc, char *argv[]) 
{
    TutGreeter *greeter;

    greeter = tut_greeter_new ();
    tut_greeter_greet (greeter);

    return 0;
}
]]></code>

<p>Last, we have
a <link href="https://www.gitorious.org/gobject-introspection-tutorial/code/blobs/stepone/Makefile"><file>Makefile</file></link>.
In a real-world project, it's preferable to use a more sophisticated
build system; the GNU build tool chain
with <app>autoconf</app>, <app>automake</app> and friends is the most
commonly used and best supported.  For the purpose of this
tutorial, an ordinary GNU Makefile makes it easy to follow what's
happening.  Just type <cmd>make</cmd> at the console and you should
get a binary called <file>greeter</file>.  Run it, and feel
greeted.</p>

<section id="exercises">
<title>Exercises</title>
<list>
  <item><p>Add a new method, <code>tut_greeter_greet_many</code> that
      should allow you to greet many entities at the same time.  Explore
      various ways of passing a collection of strings using C and GLib
      data structures.</p></item>
  <item><p>Keep a log of every greeting made.  Add a new
      method, <code>tut_greeter_get_greet_log</code> that gives access
      to that log.</p></item>
</list>
<p>To avoid conflicts in the following steps, do the exercies in a
separate copy of the code, like a git branch.</p>
</section>

<links type="prevnext" />
</page>
